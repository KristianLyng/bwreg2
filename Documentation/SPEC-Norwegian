Kravspesifikasjon for bwreg2
- Alle eksisterende funksjoner som benyttes.

1. Overordnet mål
1.1 BWReg1
1.2 Lisens
1.3 Antatt tidsbruk

2. Tekniske spesifikasjoner
2.1 Verktøy
2.2 Oversikt over individuelle databaser/tabeller
2.3 Brukernivåer og rettigheter

3. Administrasjon
3.1 Generelt om administrasjonen
3.2 Site administrasjon
3.3 Genre administrasjon
3.4 Event administrasjon
3.5 Crew administrasjon

4. Dynamisk innhold
4.1 Nyheter
4.2 Brukersystem
4.2.1 Enkeltbrukere
4.2.2 Grupper
4.3 Bilettsystem
4.3.1 Registrering
4.3.2 Kontrollering
4.3.3 Reservering
4.4 Clan og composystem
4.5 Avstemming
4.6 Kommunikasjon
4.6.1 Personlige meldinger
4.6.2 Informasjonsmeldinger

5. Prosjektstruktur
5.1 Filstruktur
5.2 PHP struktur
5.3 Backup-system

6. Statisk innhold
6.1 Rettigheter
6.2 Modifisering av statisk innhold
6.3 CSS spesifikasjon

1. Overordnet mål
=================
BWreg er "BølerLAN Web registrering".

Målet med BWReg2 er å sikre at bwreg kan benyttes i fremtiden, og brukes som 
platform for videre utviklingsbehov som måtte oppstå. Systemet skal ta seg av
så stor del som mulig av billettbestilling, plassreservering, kommunikasjon
mellom deltakere og crew (både meldinger fra deltakere til crew, fra crew til
spesifikke deltakere og fra crew til samtlige deltakere via nyheter.). 

Systemet skal være brukervennlig og intuitivt, og så idiotsikkert som overhode
mulig. 

Systemet må tåle en store, brå belastning. Dette forekommer typisk når 
billettsalget åpner. 


1.1 BWreg (versjon 1)
=====================
Dagens BWReg, heretter kalt BWreg1, fungerer. BWReg1 ble laget for å tillate 
plassreservering. Deretter ble det fremmet et ønske om at bwreg også ble brukt
som billettbestilling. Så skulle det bli penere og nyhetssystemet ble integrert.

Slik vokste ting på seg fra et lite til et ganske stort prosjekt. Resultatet
er et system som fungerer som et slags lappeteppe. Hver gang en bitte liten
ting skal endres, må store endringer i hele systemet gjøres fordi systemet
ikke var planlagt, men resultatet av spontan utvikling.

I dag betyr dette at  BWReg1 er uegnet for videre utvikling. Det er mange ting
som trengs å forbedres. Og det er bare de tingene vi vet om nå. 


1.2 Lisens
==========
For å ivareta BølerLAN sine fremtidige interesser finner jeg det logisk å
benytte "GNU General Public Licensce"[1]. En lisens som er skapt for å ivareta
brukerens rettigheter. Dette innebærer at kildekoden til BWReg2 vil være Fri.

En fri lisens som dette betyr at videre utvikling av systemet ikke krever noen
form for godkjenning fra den opprinnlige utvikleren. Det eneste det krever er
at de samme rettighetene ivaretas for fremtidige brukere. 

[1] http://www.gnu.org/licenses/gpl.html#SEC1


1.3 Antatt tidsbruk
===================
Et typisk tidsoverslag på et slik prosjekt ligger på rundt 100-250 timer 
utvikling. Dette inkluderer ren koding, planlegging og et minimum av
testing.

Dette tilsvarer cirka den tiden som allerede er investert i BWReg1. 



2. Tekniske spesifikasjoner
===========================

2.1 Verktøy
===========
PHP4, MySQL og Apache vil bli brukt for å drive systemet. Det vil i så stor 
grad som mulig skrives uavhengi av andre verktøy. Med unntak av backupscriptene.

Maskinvaren som vil trenges for å drive systemet er minimalt. Det eneste som 
spiller noen stor rolle er at internettforbindelsen er stabil.

BWReg2 vil forventes å kjøre på Linux. 


2.2 Oversikt over individuelle databaser/tabeller
=================================================
Brukerdatabase
 - Inneholder liste over brukere med navn, fødselsår, adresse, telefonnummer, 
   e-postadresse og ekstra-informasjon. 

Location-database
 - Beskriver et lokale. Inkludert rader/plasser, adresse og måter å finne 
   lokalet på.

Eventdatabase
 - Liste over eventer, med pris, location-lenke, tidsperiode, navn.

Eventusers
 - Linker event-tabellen med brukerdatabasen. 
 - Hver bruker har maks 1 record her per event. 
 - Inneholder informasjon om: Betalingsstatus, crew-status, plass,
   ventelisteplass, tid for registrering.

Content table:
 - id, eventid, tittel, permission-lenke, og blob
 - Lagrer det faktiske innholdet på de "statiske" sidene. 
 - Krever rettigheter i brukerdatabasen ELLER crew-tabel.
 - Kan dynamisk opprettes og fjernes.

Admin-users
 - Definerer admins for hele systemet, som kan lage og editere events. 
 - Lenker til user-tabellen

Crews
 - Definerer hvile crew som eksiterer.
 - En rad per crew per event. (Game, Vision, Admin....).
 
Crew list
 - En entry per crewmedlem.
 - Level, definerer stilling innad i crew. (Sjef, vaktleder, normal, etc...)

Permissions
 - EventID, Type, User, Crew
 - Definerer generiske rettigheter. Type er Read, Write eller Modify.
 - Modify == slett/rename. User kan enten være 0 eller en uid.
 - Crew kan være en lenke til crew-id. 

News
 - Content

2.3 Brukernivåer og rettigheter
===============================
Eventusers crew-status-feltet definerer:
	0: Vanlig bruker.
	1-5: Reservert.
	6: Opplastingsrettigheter.
	7-9: Reservert.
	10: Vanlig crew.

Permission-tabellen brukes for å dynamisk opprette rettigheter for content,
news og andre ting. Inkludert dynamiske sider.


3. Administrasjon
=================

3.1 Generelt om administrasjonen
================================
Målet er at så lite som mulig skal måtte gjøres manuelt, og at tilnærmet lik
alt skal kunne gjøres via web-interfacet. 

Dette innebærer en form for kompleksistet som er betydelig tyngre enn dagens
bwreg1, men åpner også for at samme bwreg skal kunne hoste flere events
samtidig. 

3.2 Site administrasjon
=======================
Denne oppgaven vil typisk tilfalle personen som installerer bwreg2. Oppgavene
er få, og går stort set på å modifisere genres, samt overse backup.

Backup kan, vel og merke, også overses av andre med administrator-rettigheter
på event-nivå eller høyere.

3.3 Genre administrasjon
========================
Et genre er f.eks "BølerLAN". Genre administrasjon sørger for felles forside,
og definerer "current event." En administrator på dette nivået kan også 
opprette nye events, f.eks "BølerLAN 07 Autumn". Fordelen med å lage "Genre"
er for å ha et felles sted å lagre alt til en serie lan parties, som er det
BølerLAN f.eks er. Ved hjelp av denne løsningen, kan man ha flere forskjellige
serier lan-parties i samme system. 

Definerer også utseende på websidene, f.eks menyene. 

Kun events som er "current event" vil vises som nyheter, mens nyheter fra
andre events i samme genre, vil vises i nyhetsarkivet. Nyheter trenger ikke
å høre til et spesifikt event, men må høre til et genre. 

Kompleksiteten dette introduserer er relativt liten, og gevinsten er ganske
grei, om vi får andre som ønsker å dele vårt system.

3.4 Event administrasjon
========================
Dette er det som idag er "site admin", i praksis. Tar seg av f.eks 
bankkontonummer, kontakt-personer, og lignende. 

3.5 Crew administrasjon
=======================
Dette går ut på å kunne tildele folk crew-status og å fjerne det igjenn. 

4. Dynamisk innhold
===================
Det lages et eget språk for å lagre dynmaisk innhold, lignende det vi
bruker for nyheter idag, men nærmere wiki-typen, for å støtte mye gøyall
formatering. Om mulig, bruker vi et eksisterende bibliotek for å 
implementere dette.

På det som tradisjonelt er statiske sider, har vi ett tillegg til dette
språket for å kunne plassere andre dynamiske objekter, f.eks en nyhetsmodul
eller en poll. 

Fokus er brukervennlighet.

4.1 Nyheter
===========
Nyheter binnes opp mot en side, genre og event. Om event er blankt, gjelder
det alle event i det genret. 

Hver nyhets-modul bindes opp mot permission-tabellen, slik at kun de med
korrekt rettigheter kan poste på forsiden, f.eks. 

Det skal være lett og intuitivt å opprette nye nyhetsmoduler.

4.2 Brukersystem
================
Brukersystemet skal sørge for at man til enhver tid bare trenger EN bruker,
uavhengi av hvor mange eventer man skal være med på, eller hvilke
forskjellige rettigheter man har. 

Det skal være intuitivt for brukerene, men også for administratorene.

Tanken er at det skal være så idiotsikkert som mulig. 

4.2.1 Enkeltbrukere
===================
Hver enkelt bruker blir presentert med en "din side"-aktig side etter
han/hun har logget inn. Denne viser all relevant informasjon om brukeren,
samt meldinger til brukeren.

Mens man er logget inn får man prioriterte meldinger på samtlige sider
man er på, intill man klikker dem bort. 

Under registrering vil det være bedre kontroll på data hver bruker skriver
inn. F.eks kan det være nødvendig med e-post konfirmering.

Dynamiske menyer sørger for at det er lett for en administrator f.eks å ha 
en rekke menyer for de forskjellige systemene.

4.2.2 Grupper
=============
Gruppesystemet skal la folk kunne plassreservere seg sammen. Det skal
også være mulig å la en og samme person bestille billetter for grupper
på opp til X antall deltakere, der X varierer fra event til event.

Klansystemet er relatert til grupper, men ikke avhengi av dem.

4.3 Bilettsystem
================
Billettsystemet blir mye ala det vi har i dag, men smartere. Det vil være
mer automatisering rundt åpningstider og ventelister, f.eks, samtidig som
det skal være lett for event-admin å overstyre denne automatikken. 

4.3.1 Registrering
==================
Foregår ved enkel klikking ette rman har logget inn. Avhengi av hvilket
event/genre man bruker for å legge inn, velges et default event, men det 
skal være lett å velge ett annet event. Og det skal dobbeltsjekkes
at brukeren vet hva han eller hun velger.

4.3.2 Kontrollering
===================
Modulbasert. Standardmodulene skal sørge for å implementere funksjonaliteten
bwreg1 har idag. Det vil si enkel, manuel kontrollering av billetter og 
om folk har ankommet. 

Også naturlig støtte for søking og sortering basert på forskjellige
kriterier, f.eks bare vise ubetalte billetter for folk som ikke har
ankommet. Prioritet er at det skal være enkelt å bekrefte at folk har
kommet og/eller betalt.

Gjerne støtte for flere endringer samtidig.

4.3.3 Reservering
=================
Plassreservering foregår mye som idag, men med støtte for grupper.
Enten kan man reservere en plass selv, eller tildele den til gruppens
"seater". 

Det vil være opp til event-admin å definere hvor store grupper som er
tillatt, og om det kreves at alle har betalt.

4.4 Clan og composystem
=======================
I første omgang skal dette systemet kun ha støtte for å registrere klaner
og å lage compoer som deltakere kan melde seg på. 

En Klan kan bruke en gruppe som mal, men er ikke på noen måte bundet opp
mot denne gruppen. Det er kun under opprettelsen av klanen at det er en
forbindelse mellom grupper og klaner, og dette er heller ikke absolutt
på noen måte.

Kontroll av klan-deltakere foregår mye på samme måte som gruppe-systemet.

Avhengi av tidsbruk og investering, kand et vurderes å implementere 
automatisk bracket-system. Systemet skal lages med dette i bakhodet.

4.5 Avstemming
==============
Polls bindes opp mot eventer. En poll-klasse kan f.eks være "vision",
og de kan ha en poll for hver natt, der vision-crew kan styre den
enkelte pollen. Event-admin lager nye klasser. 


4.6 Kommunikasjon
=================
Kommunikasjon skal gå over meldinger OG mail. Avhengi av prioriteten
brukeren velger. All mail sendt til brukeren skal også lagres som en 
melding.

Det skal kunne sendes meldinger til grupper og klaner, systemet skal 
hele tiden være basert på at en melding er personlig, så om man sender
en melding til en cs5on5 klan, sendes 5 individuelle meldinger, men
dette gjøres automatisk så game crew trykker send bare en gang.

Unntaket for dette er meldinger til crew, dette vil være ticket-basert.

4.6.1 Personlige meldinger
==========================
Personlige meldinger er typisk fra crew til deltakere, som svar på spørsmål
brukerene måtte ha. 

Det kan også være internt mellom crew. Det er opp til site-admin om dette
tillates mellom vanlige brukere, og opp til event-admin om det er lov
mellom deltakere på ett event. Dette kan gjøre det lettere for folk å
løse plass-konflikter f.eks.

4.6.2 Informasjonsmeldinger
===========================
Dette er typisk fra crew til deltakere, og kan gå til en klan, gruppe,
eller deltakere med spesiell status. Den spesielle statusen vil være
dynamisk. Nok en gang vil dette kun gjelde i det meldingen sendes:
Systemet henter f.eks alle brukere som er på venteliste når du poster,
men det er ingen kontroll på om de fortsatt er på venteliste når de
leser meldingen.

5. Prosjektstruktur
===================
5.1 Filstruktur
===============
Det vil være en README fil i roten av prosjektet, som vil forklare hvordan 
man skal gå frem for å finne informasjonen man trenger.

Det vil også være en Documentation/ katalog som inneholder all dokumentasjon.
Dette vil være alt fra denne spesifikasjonen, til installasjonsrutiner, 
detaljer om backupsystemet, osv. 

Det vil være to kataloger for script. En for "servicescripts" og en for
"installasjonsscript". Den første vil inneholde backupscript, og andre script
man kan få bruk for mens systemet er i drift, mens installasjonsscript 
katalogen naturlig nok er ment på installasjon, oppgradering og flytting.

5.2 PHP struktur
================
Dette vil bli delt inn i moduler. Målet er at så få URI'er som mulig skal 
presenteres til brukeren. 

En katalog vil inneholde fellesfiler for alle modulene, f.eks informasjon
om databasen, konfigurasjonsinformasjon og lignende. 

(mer kommer)

5.3 Backup-system
=================
Backupsystemet vil fungere ikke ulikt det vi har i dag med bwreg1. Dette betyr
at det er delt. Først og fremst vil det ikke være nødvendig å kopiere webfilene
som vi gjør i dag fordi de vil lagres i git, og på mer enn en maskin. 

SQL dumps vil kjøres hver natt, og diff'er vil bli utført før de lagres. Disse
kopieres også til en remote tjener for å forhindre tap om en harddisk går tapt.
Det vil også være mulig for en site administrator å kjøre en backup on demand,
men denne vil lagres lokalt på web-serveren intill den nattlige backupen 
overfører denne backupen.

6. Statisk innhold
==================
Statisk innhold er egentlig ikke statisk, men tanken er at dette f.eks kan
være foreldreskrivet.

Det skal være lett å opprette og fjerne slike sider, og det skal være en form
for historie på hva som endres. Vanlige brukere skal ikke kunne editere slike
sider.

6.1 Rettigheter
===============
Genre-admin skal kunne definere rettigheter på slike sider, slik at f.eks
game-crew skal kunne endre game-sidene.

6.2 Modifisering av statisk innhold
===================================
Bruker språket vi nevnte tidligere, skal ikke være nødvendig å kunne HTML.

6.3 CSS spesifikasjon
=====================
Se Documentation/CSS-Spec for detaljer.

Tanken er at siden bygges opp av flere elementer: Meny, meny-element, 
overskrift, nyhetselement... osv.

Det skal være mulig å bytte CSS lett for genre-admin.
