We base our permission system on groups.

1. Permissions
2. Groups
3. Group members
4. Use in PHP
5. Administration
6. Special ACLs

1. Permissions
==============
gid Genre (not null)
eid EventID (null means genre at large)
resource Specific resource (other items link here), null means event at large.
resource_name Human readable name of the resource.
permission Defines what the group can do. (Read/Write/Modify)
groupid Group

Resource can typically be "Game" with permission set to rwm and group set
to the GameCrew group, while another entry with might be identical, but with
permission set to Read and group NULL, makeing it world-readable. 
Yet another identical entry could have rwm Permission with group set
to "AdminCrew" for instance. 

2. Groups
=========
A group is generic, it will be used for diffrent purposes.

groupid Uniqe group ID
gid Genre (not null)
eid Event (null means the group isn't bound to a specific event).
group_name Genre/Event-uniqe human readable name of the Group.
owner Uid of the group admin.

3. Group members
================
groupid Link to the group table
uid Link to the user table
level Defines the right of the user. How this is used is up to the 
      individual modules implementing groups. (Reservation will want
	  to have a seater and possibly a register or two for instance).
role Description of the persons role in the group ("Seater", "Camper",
     "GameCrew Chief", "Clown", ....).


4. Use in PHP
=============
The User class will read in permissions for the user, and store it
in a sane way. Other parts of the code should only need to do
$user->permission(id) to get the permission that user has for the
specific resource. 

As it can be usefull to store detailed permission and group info,
the User class should do this so it is easily printable, and the
get() methods should compare against $me's permissions when printing
info about a user.

It is each modules responsibility to check for permissions, the user
class simply supplies the means to do it. It is not (yet?) predefined
how the level field of the group_members is to be treated, but the
general rule is that it should be used for internal group management.
Meaning that a user with an elevated level, could have the ability to
affect the status of other users (sign them up for compos, reserve
seats, etc), but they would have the same permissions on shared resources
like content pages, news, todo lists and similar. 

5. Administration
=================
A bwreg admin is a user in a group with access to the BWReg2 resource of gid
and eid 0. BWReg2 admins can create new genres and assign groups to any 
resource. This ensures that the BWReg2 admin can make sure a genre has a
valid set of admins even if all current admins of that genre suddenly goes
missing.

A BWreg2 admin can also delete permissions, and genres. This is not 
recommended, and any sort of data associated with the genre will be left 
intact.

A genre admin is a user in a group with permissions to the genre-shortname
resource and eid 0. Typically blan or jallalan. A genre admin can typically
create new events and assign groups to the genre-specific resources. 

An event admin is an admin with permissions to the genre-shortname resource
with the apropriate eid set. Typically blan/gid:1/eid:1 for instance.
An event admin can create event-specific resource groups and assign
groups to the event-specific groups. 

If a user only has rw permissions on a resource, he or she can only modify
the resource it self. In other words, you need the 'm' permission to grant
permissions to a resource. In most cases, administrators only want to hand
out "rw" permissions. The exception beeing when the admin wants to delegate
administration of a resource to another group of users.

This goes for any resource at any level, meaning that a user with RW to
the BWReg2 resource, can not grant others permissions to that resource.

6. Special ACLs
===============

At the moment, there are a few special ACL's. This is necesarry when the 
resource isn't defined. Some of these pre-defined ACL's could possibly
be defined in the genre-information, but at present time, it's not considered
necesarry.

BWReg2  - gid 0
   This is the super-user ACL. It gives you global permissions. You probably
   only want one group with rwm here, but there can probably be situations 
   where you want a group with read-only on everything for instance too.
   Keep this ACL small and only have completly trusted users on it.

<gname> - gid N
   Example: blan or jallalan. This is the genre-equivalent of the BWReg2 group.
   You probably only want genre admins here. Write permission here also gives
   the usergroup the ability to modify other groups to a certain extent, so
   usethis carefully. Giving read-permission here will let the usergroup read
   information about other users, and is fairly usefull.

<gname>Info - gid N
   This is the ACL used for non-existant pages, meaning you need write access
   here to be able to create new pages. It is probably a good idea to use
   this list for all public pages, and give crew write permission. Or at any
   rate give crew write/read permission so they can quickly create new pages.
   If you don't wish to let crew create public pages, you can still add them
   here, but avoid giving everyone else read access, and instead using an other
   ACL for public information.


