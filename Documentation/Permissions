We base our permission system on groups.

Permissions
===========
gid Genre (not null)
eid EventID (null means genre at large)
resource Specific resource (other items link here), null means event at large.
resource_name Human readable name of the resource.
permission Defines what the group can do. (Read/Write/Modify)
groupid Group

Resource can typically be "Game" with permission set to rwm and group set
to the GameCrew group, while another entry with might be identical, but with
permission set to Read and group NULL, makeing it world-readable. 
Yet another identical entry could have rwm Permission with group set
to "AdminCrew" for instance. 

Groups
======
A group is generic, it will be used for diffrent purposes.

groupid Uniqe group ID
gid Genre (not null)
eid Event (null means the group isn't bound to a specific event).
group_name Genre/Event-uniqe human readable name of the Group.
owner Uid of the group admin.

Group members
=============
groupid Link to the group table
uid Link to the user table
level Defines the right of the user. How this is used is up to the 
      individual modules implementing groups. (Reservation will want
	  to have a seater and possibly a register or two for instance).
role Description of the persons role in the group ("Seater", "Camper",
     "GameCrew Chief", "Clown", ....).


Use in PHP
==========
The User class will read in permissions for the user, and store it
in a sane way. Other parts of the code should only need to do
$user->permission(id) to get the permission that user has for the
specific resource. 

As it can be usefull to store detailed permission and group info,
the User class should do this so it is easily printable, and the
get() methods should compare against $me's permissions when printing
info about a user.

It is each modules responsibility to check for permissions, the user
class simply supplies the means to do it. It is not (yet?) predefined
how the level field of the group_members is to be treated, but the
general rule is that it should be used for internal group management.
Meaning that a user with an elevated level, could have the ability to
affect the status of other users (sign them up for compos, reserve
seats, etc), but they would have the same permissions on shared resources
like content pages, news, todo lists and similar. 
